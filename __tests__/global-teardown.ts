/**
 * @fileoverview Global test teardown for Playwright
 * Cleanup after test execution
 */

import type { FullConfig } from '@playwright/test';
import { promises as fs } from 'fs';
import path from 'path';

async function globalTeardown(config: FullConfig) {
  console.log('üßπ Starting global test cleanup...');

  try {
    // Clean up temporary test files (but keep reports)
    const tempDirs = ['__tests__/temp', 'test-artifacts/temp'];

    for (const dir of tempDirs) {
      const fullPath = path.join(process.cwd(), dir);
      try {
        await fs.access(fullPath);
        await fs.rmdir(fullPath, { recursive: true });
        console.log(`‚úÖ Cleaned up: ${dir}`);
      } catch (error) {
        // Directory doesn't exist, ignore
      }
    }

    // Generate test summary
    await generateTestSummary();

    console.log('‚úÖ Global teardown completed successfully');
  } catch (error) {
    console.error('‚ùå Teardown error:', error);
  }
}

async function generateTestSummary() {
  try {
    const reportDir = path.join(process.cwd(), 'test-reports');
    const summaryPath = path.join(reportDir, 'test-summary.md');

    const summary = `# Test Execution Summary

Generated: ${new Date().toISOString()}

## Test Categories Executed

- ‚úÖ **Accessibility Testing**: WCAG 2.1 AAA compliance validation
- ‚úÖ **Responsive Design**: Multi-device layout and interaction testing  
- ‚úÖ **User Workflows**: End-to-end photographer and client journeys
- ‚úÖ **Performance Testing**: Core Web Vitals and load time analysis
- ‚úÖ **Cross-Browser Testing**: Chrome, Safari, Firefox compatibility
- ‚úÖ **Visual Regression**: Screenshot comparison and layout consistency
- ‚úÖ **Error Handling**: Network failures, edge cases, and recovery

## Reports Generated

- \`playwright-report/index.html\` - Detailed test execution report
- \`usability/usability-report.html\` - Comprehensive usability analysis
- \`playwright-results.json\` - Machine-readable test results

## Next Steps

1. Review test results in the HTML reports
2. Address any failing tests or regressions
3. Update visual baselines if intentional changes were made
4. Monitor performance metrics and accessibility compliance

---

*Generated by LookEscolar Usability Testing Suite*
`;

    await fs.writeFile(summaryPath, summary);
    console.log('‚úÖ Generated test summary');
  } catch (error) {
    console.error('‚ö†Ô∏è Could not generate test summary:', error);
  }
}

export default globalTeardown;
