diff --git a/components/gallery/UnifiedGalleryPage.tsx b/components/gallery/UnifiedGalleryPage.tsx
index 09d6be8..c63097b 100644
--- a/components/gallery/UnifiedGalleryPage.tsx
+++ b/components/gallery/UnifiedGalleryPage.tsx
@@ -18,16 +18,20 @@ interface Photo {
   size: number;
   width: number;
   height: number;
+  signed_url?: string | null;
+  download_url?: string | null;
+  type?: string | null;
 }
 
 interface Subject {
   id: string;
   name: string;
-  grade_section: string;
-  event: {
-    name: string;
-    school_name: string;
-  };
+  grade?: string | null;
+  section?: string | null;
+  event?: {
+    name?: string | null;
+    school_name?: string | null;
+  } | null;
 }
 
 interface PackageOption {
@@ -161,7 +165,7 @@ export default function UnifiedGalleryPage({ token }: UnifiedGalleryPageProps) {
   const loadGallery = async (targetPage: number) => {
     try {
       const response = await fetch(
-        `/api/family/gallery-simple/${token}?page=${targetPage}&limit=24`
+        `/api/family/gallery/${token}?page=${targetPage}&limit=24`
       );
 
       if (!response.ok) {
@@ -171,14 +175,37 @@ export default function UnifiedGalleryPage({ token }: UnifiedGalleryPageProps) {
         return;
       }
 
-      const data = await response.json();
-      const newPhotos = (data.photos || []) as Photo[];
+      const payload = await response.json();
+      const gallery = payload?.data?.gallery;
+
+      if (!gallery) {
+        setError(payload?.error || 'GalerÃ­a no disponible');
+        setLoading(false);
+        return;
+      }
+
+      const newPhotos: Photo[] = (gallery.items || []).map((item: any) => ({
+        id: item.id,
+        filename: item.filename || 'foto',
+        preview_url:
+          item.previewUrl ||
+          item.signedUrl ||
+          item.downloadUrl ||
+          '/placeholder-image.svg',
+        size: item.size ?? 0,
+        width: item.metadata?.width ?? 0,
+        height: item.metadata?.height ?? 0,
+        signed_url: item.signedUrl ?? null,
+        download_url: item.downloadUrl ?? null,
+        type: item.type ?? null,
+      }));
+
       setPhotos((prev) =>
         targetPage === 1 ? newPhotos : [...prev, ...newPhotos]
       );
-      setHasMore(Boolean(data.pagination?.has_more ?? newPhotos.length >= 24));
+      setHasMore(Boolean(gallery.pagination?.hasMore));
       setPage(targetPage);
-      setSubject(data.subject);
+      setSubject(gallery.subject ?? gallery.student ?? null);
 
       // Load favorites from localStorage
       const savedFavorites = localStorage.getItem(`favorites_${token}`);
